name: "Publish Release"

on:
  push:
    tags:
      - "v*"
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: get version
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

      - name: create release
        id: create-release
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const changelogContent = fs.readFileSync('changelog.md', 'utf-8');
            const regex = new RegExp( `(?<=\\[${process.env.PACKAGE_VERSION}\\]\\s)([\\s\\S]*?)(?=\\s## \\[)`, 'g');
            const releaseNotes = changelogContent.match(regex)?.[0].trim() || '';

            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${process.env.PACKAGE_VERSION}`,
              name: `Seelen UI v${process.env.PACKAGE_VERSION}`,
              body: releaseNotes,
              draft: true,
              prerelease: false,
            });
            return data.id;

  build-installers:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "windows-latest"
            args: ""

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Install winget
        uses: Cyberboss/install-winget@v1

      - name: Install MSIX dependencies
        if: matrix.platform == 'windows-latest'
        shell: powershell
        run: |
          winget install -Id Microsoft.DotNet.AspNetCore.8
          winget install -Id Microsoft.DotNet.DesktopRuntime.8
          winget install -Id MarcinOtorowski.MSIXHero

      - name: Install frontend dependencies
        run: npm install

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          args: ${{ matrix.args }}

      - name: Bundle MSIX
        run: npm run build:msix

      - name: Add msix to release files
        uses: "actions/github-script@v7"
        env:
          releaseId: ${{ needs.create-release.outputs.release_id }}
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          script: |
            const fs = require('fs').promises;
            await github.rest.repos.uploadReleaseAsset({
              name: `Seelen.SeelenUI_${process.env.PACKAGE_VERSION}_x64__p6yyn03m1894e.msix`,
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ env.releaseId }},
              data: await fs.readFile(`./target/release/bundle/msix/Seelen.SeelenUI_${process.env.PACKAGE_VERSION}_x64__p6yyn03m1894e.msix`)  # The file to upload.
            });
